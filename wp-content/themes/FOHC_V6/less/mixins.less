//
// Grid
// --------------------------------------------------

#grid {
  .core (@width, @gutter) {

    @gridColumnWidth: (@width / @columns);

    .spanX (@index) when (@index > 0) {
      .grid_@{index} { .span(@index); .get_nested_rows((@gridColumnWidth * @index)); }
      .spanX(@index - 1);
    }
    .spanX (0) {}

    .span (@columns-no) {
      width: (((@gridColumnWidth * @columns-no) + ((@gutter / @columns) * @columns-no)) - @gutter)  - 1;
    }

    .row {
      width: @width + @gutter;
    }

    // generate .spanX and .offsetX
    .spanX (@columns);

    .get_nested_rows(@nested_width){

      .row {
        width: @nested_width + @gutter; // For nested rows
      }

    }

  }
}

//
// Mixins
// --------------------------------------------------

// Opacity
.opacity(@opacity) {
  opacity: @opacity;
  // IE8 filter
  @opacity-ie: (@opacity * 100);
  filter: ~"alpha(opacity=@{opacity-ie})";
}

.arrow(@size, @color, @direction, @offset, @border-size: 0, @border-color: inherit) {
  position: relative;
  &:after,
  &:before {
    content: "";
    position: absolute;
    width: 0;
    height: 0;
  }
}

.arrow(@size, @color, @direction, @offset, @border-size: 0, @border-color: inherit) when (@direction = top) {
  @m-size: @size + (@border-size*2);

  &:after {
    bottom: 100%;
    left: @offset;
    margin-left: -@size;

    border-left: @size solid transparent;
    border-right: @size solid transparent;
    border-bottom: @size solid @color;
  }
  
  &:before {
    bottom: 100%;
    left: @offset;
    margin-left: -@m-size;

    border-left: @m-size solid transparent;
    border-right: @m-size solid transparent;
    border-bottom: @m-size solid;
    border-bottom-color: @border-color;
  }
}

.arrow(@size, @color, @direction, @offset, @border-size: 0, @border-color: inherit) when (@direction = bottom) {
  @m-size: @size + (@border-size*2);

  &:after {
    top: 100%;
    left: @offset;
    margin-left: -@size;

    border-left: @size solid transparent;
    border-right: @size solid transparent;
    border-top: @size solid @color;
  }

  &:before {
    top: 100%;
    left: @offset;
    margin-left: -@m-size;
    border-left: @m-size solid transparent;
    border-right: @m-size solid transparent;
    border-top: @m-size solid;
    border-top-color: @border-color;
  }
}

.arrow(@size, @color, @direction, @offset, @border-size: 0, @border-color: inherit) when (@direction = right) {
  @m-size: @size + (@border-size*2);

  &:after {
    left: 100%;
    top: @offset;
    margin-top: -@size;

    border-top: @size solid transparent;
    border-bottom: @size solid transparent;
    border-left: @size solid @color;
  }
  &:before {
    left: 100%;
    top: @offset;
    margin-top: -@m-size;

    border-top: @m-size solid transparent;
    border-bottom: @m-size solid transparent;
    border-left: @m-size solid;
    border-left-color: @border-color;
  }
}

.arrow(@size, @color, @direction, @offset, @border-size: 0, @border-color: inherit) when (@direction = left) {
  @m-size: @size + (@border-size*2);

  &:after {
    right: 100%;
    top: @offset;
    margin-top: -@size;

    border-top: @size solid transparent;
    border-bottom: @size solid transparent;
    border-right: @size solid @color;
  }
  &:before {
    right: 100%;
    top: @offset;
    margin-top: -@m-size;

    border-top: @m-size solid transparent;
    border-bottom: @m-size solid transparent;
    border-right: @m-size solid;
    border-right-color: @border-color;
  }
}

.animation(@properties) {
  -webkit-animation: @properties;
     -moz-animation: @properties;
       -o-animation: @properties;
          animation: @properties;
}

.border-radius(@radius) {
  -webkit-border-radius: @radius;
     -moz-border-radius: @radius;
          border-radius: @radius;
}

.box-sizing(@boxmodel: border-box) {
  -webkit-box-sizing: @boxmodel;
     -moz-box-sizing: @boxmodel;
          box-sizing: @boxmodel;
}

.box-shadow(@properties) {
  -webkit-box-shadow: @properties;
     -moz-box-shadow: @properties;
          box-shadow: @properties;
}

.inline-block {
  display: inline-block;
  zoom: 1;
  *display: inline;
}

.font-size(@sizeValue){
  @remValue: @sizeValue/16;
  @pxValue: @sizeValue;
  font-size: ~"@{pxValue}px"; 
  font-size: ~"@{remValue}rem";
}

.opacity(@value) {
  opacity: @value / 100;
  filter: ~"alpha(opacity=@{value})";
}

// User select
// For selecting text on the page
.user-select(@select) {
  -webkit-user-select: @select;
     -moz-user-select: @select;
      -ms-user-select: @select;
       -o-user-select: @select;
          user-select: @select;
}

.placeholder-height(@height) {
  &:-moz-placeholder {
    line-height: @height;
  }
  &::-webkit-input-placeholder {
    line-height: @height;
  }
  &.placeholder {
    line-height: @height;
  }
}

.mask(...) {
  -webkit-mask: @arguments;
          mask: @arguments;
}

.placeholder-color(@color) {
  &:-moz-placeholder {
    color: @color;
  }
  &::-webkit-input-placeholder {
    color: @color;
  }
  &.placeholder {
    color: @color;
  }
}

.transition(@properties) {
  -webkit-transition: @properties;
     -moz-transition: @properties;
       -o-transition: @properties;
          transition: @properties;
  -webkit-backface-visibility: hidden;
}

.transform(@properties) {
  -webkit-transform: @properties;
     -moz-transform: @properties;
      -ms-transform: @properties;
       -o-transform: @properties;
          transform: @properties;
}

.vertical-gradient(@from, @to) {
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, @from), color-stop(100%, @to));
  background: -webkit-linear-gradient(top, @from, @to);
  background:    -moz-linear-gradient(top, @from, @to);
  background:     -ms-linear-gradient(top, @from, @to);
  background:      -o-linear-gradient(top, @from, @to);
  background:   linear-gradient(to bottom, @from, @to);
}

.selection(@color) {
  &::selection {
    background: @color;
  }
  &::-moz-selection {
    background: @color;
  }
}

.clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

// Alerts
// -------------------------
.alert-variant(@background; @border; @text-color) {
  background-color: @background;
  border-color: @border;
  color: @text-color;
  hr {
    border-top-color: darken(@border, 5%);
  }
  .alert-link {
    color: darken(@text-color, 10%);
  }
}

// Mixin for form field states
.form-field-state(@textColor: #555, @borderColor: #ccc, @backgroundColor: #f5f5f5) {
  // Set the text color
  .control-label,
  .help-block,
  .help-inline {
    color: @textColor;
  }
  // Style inputs accordingly
  .checkbox,
  .radio,
  input,
  select,
  textarea {
    color: @textColor;
  }
  input,
  select,
  textarea {
    border-color: @borderColor;
    .box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    &:focus {
      border-color: darken(@borderColor, 10%);
      @shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten(@borderColor, 20%);
      .box-shadow(@shadow);
    }
  }
}

// Responsive utilities
// -------------------------
// More easily include all the states for responsive-utilities.less.
.responsive-visibility() {
  display: block !important;
  tr& { display: table-row !important; }
  th&,
  td& { display: table-cell !important; }
}

.responsive-invisibility() {
  display: none !important;
  tr& { display: none !important; }
  th&,
  td& { display: none !important; }
}